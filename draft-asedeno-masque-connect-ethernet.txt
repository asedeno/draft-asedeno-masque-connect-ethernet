



Multiplexed Application Substrate over QUIC Encryption         A. Sede√±o
Internet-Draft                                                Google LLC
Intended status: Standards Track                           27 April 2023
Expires: 29 October 2023


                       Proxying Ethernet in HTTP
              draft-asedeno-masque-connect-ethernet-latest

Abstract

   This document describes how to proxy Ethernet frames in HTTP.  This
   protocol is similar to IP proxying in HTTP, but allows transmitting
   arbitrary Ethernet frames.  More specifically, this document defines
   a protocol that allows an HTTP client to create Layer 2 Ethernet
   tunnel through and HTTP server that acts as an Ethernet switch.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://asedeno.github.io/draft-asedeno-masque-connect-ethernet/
   draft-asedeno-masque-connect-ethernet.html.  Status information for
   this document may be found at https://datatracker.ietf.org/doc/draft-
   asedeno-masque-connect-ethernet/.

   Discussion of this document takes place on the Multiplexed
   Application Substrate over QUIC Encryption Working Group mailing list
   (mailto:masque@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/masque/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/masque/.

   Source for this draft and an issue tracker can be found at
   https://github.com/asedeno/draft-asedeno-masque-connect-ethernet.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 October 2023.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Configuration of Clients
   4.  Tunnelling Ethernet over HTTP
   5.  Context Identifiers
   6.  HTTP Datagram Payload Format
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   HTTP provides the CONNECT method (see Section 9.3.6 of [HTTP]) for
   creating a TCP [TCP] tunnel to a destination, a similar mechanism for
   UDP [CONNECT-UDP], and an additional mechanism for IP [CONNECT-IP].
   However, these mechanisms can't carry layer 2 frames without further
   encapsulation inside of IP, for instance with GUE, which imposes an
   MTU cost.

   This document describes a protocol for tunnelling Ethernet frames
   through an HTTP server acting as an Ethernet switch over HTTP.  This
   can be used to extend an Ethernet broadcast domain.

   This protocol supports all existing versions of HTTP by using HTTP
   Datagrams [HTTP-DGRAM].  When using HTTP/2 [HTTP/2] or HTTP/3
   [HTTP/3], it uses HTTP Extended CONNECT as described in
   [EXT-CONNECT2] and [EXT-CONNECT3].  When using HTTP/1.x [HTTP/1.1],
   it uses HTTP Upgrade as defined in Section 7.8 of [HTTP].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   In this document, we use the term "Ethernet proxy" to refer to the
   HTTP server that responds to the Ethernet proxying request.  The term
   "client" is used in the HTTP sense; the client constructs the
   Ethernet proxying request.  If there are HTTP intermediaries (as
   defined in Section 3.7 of [HTTP]) between the client and the Ethernet
   proxy, those are referred to as "intermediaries" in this document.
   The term "Ethernet proxying endpoints" refers to both the client and
   the Ethernet proxy.

   This document uses terminology from [QUIC].  Where this document
   defines protocol types, the definition format uses the notation from
   Section 1.3 of [QUIC].  This specification uses the variable-length
   integer encoding from Section 16 of [QUIC].  Variable-length integer
   values do not need to be encoded in the minimum number of bytes
   necessary.

   Note that, when the HTTP version in use does not support multiplexing
   streams (such as HTTP/1.1), any reference to "stream" in this
   document represents the entire connection.

3.  Configuration of Clients

   TODO config

4.  Tunnelling Ethernet over HTTP

5.  Context Identifiers

   The mechanism for proxying Ethernet in HTTP defined in this document
   allows futer extensions to exchange HTTP Datagrams that carry
   different semantics from Ethernet frames.  Some of these extensions
   can augment Ethernet payloads with additional data or compress
   Ethernet frame header fields, while others can exchange data that is
   completely separate from Ethernet payloads.  In order to accomplish
   this, all HTTP Datagrams associated with Ethernet proxying requests
   streams start with a Context ID field; see Section 6.

   Context IDs are 62-bit integers (0 to 2^62-1).  Context IDs are
   encoded as variable-length integers; see Section 16 of [QUIC].  The
   Context ID value of 0 is reserved for Ethernet payloads, while non-
   zero values are dynamically allocated.  Non-zero even-numbered
   Context-IDs are client allocated, and odd-numbered Context IDs are
   proxy-allocated.  The Context ID namespace is tied to a given HTTP
   request; it is possible for a Context ID with the same numeric value
   to be simultaneously allocated in distinct requests, potentially with
   different semantics.  Context IDs MUST NOT be re-allocated within a
   given HTTP request but MAY be allocated in any order.  The Context ID
   allocation restrictions to the use of even-numbered and odd-numbered
   Context IDs exist in order to avoid the need for synchronization
   between endpoints.  However, once a Context ID has been allocated,
   those restrictions do not apply to the use of the Context ID; it can
   be used by either the client or the IP proxy, independent of which
   endpoint initially allocated it.

   Registration is the action by which an endpoint informs its peer of
   the semantics and format of a given Context ID.  This document does
   not define how registration occurs.  Future extensions MAY use HTTP
   header fields or capsules to register Context IDs.  Depending on the
   method being used, it is possible for datagrams to be received with
   Context IDs that have not yet been registered.  For instance, this
   can be due to reordering of the packet containing the datagram and
   the packet containing the registration message during transmission.

6.  HTTP Datagram Payload Format

   When associated with Ethernet proxying request streams, the HTTP
   Datagram Payload field of HTTP Datagrams (see [HTTP-DGRAM]) has the
   format defined in Figure 1.  Note that when HTTP Datagrams are
   encoded using QUIC DATAGRAM frames, the Context ID field defined
   below directly follows the Quarter Stream ID field which is at the
   start of the QUIC DATAGRAM frame payload.

   Ethernet Proxying HTTP Datagram Payload {
     Context ID (i),
     Payload (..),
   }

              Figure 1: Ethernet Proxying HTTP Datagram Format

   The Ethernet Proxying HTTP Datagram Payload contains the following
   fields:

   Context ID:  A variable-length integer that contains the value of the
      Context ID.  If an HTTP/3 datagram which carries an unknown
      Context ID is received, the receiver SHALL either drop that
      datagram silently or buffer it temporarily (on the order of a
      round trip) while awaiting the registration of the corresponding
      Context ID.
   Payload:  The payload of the datagram, whose semantics depend on
      value of the previous field.  Note that this field can be empty.

   Ethernet frames are encoded using HTTP Datagrams with the Context ID
   set to zero.  When the Context ID is set to zero, the Payload field
   contains a full Layer 2 Ethernet Frame (from the MAC destination
   field until the last byte of the Frame check sequence field).

7.  Security Considerations

   TODO Security

8.  IANA Considerations

   This document has no IANA actions.

9.  References

9.1.  Normative References

   [EXT-CONNECT2]
              McManus, P., "Bootstrapping WebSockets with HTTP/2",
              RFC 8441, DOI 10.17487/RFC8441, September 2018,
              <https://www.rfc-editor.org/rfc/rfc8441>.

   [EXT-CONNECT3]
              Hamilton, R., "Bootstrapping WebSockets with HTTP/3",
              RFC 9220, DOI 10.17487/RFC9220, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9220>.

   [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

   [HTTP-DGRAM]
              Schinazi, D. and L. Pardue, "HTTP Datagrams and the
              Capsule Protocol", RFC 9297, DOI 10.17487/RFC9297, August
              2022, <https://www.rfc-editor.org/rfc/rfc9297>.

   [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP/1.1", STD 99, RFC 9112, DOI 10.17487/RFC9112,
              June 2022, <https://www.rfc-editor.org/rfc/rfc9112>.

   [HTTP/2]   Thomson, M., Ed. and C. Benfield, Ed., "HTTP/2", RFC 9113,
              DOI 10.17487/RFC9113, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9113>.

   [HTTP/3]   Bishop, M., Ed., "HTTP/3", RFC 9114, DOI 10.17487/RFC9114,
              June 2022, <https://www.rfc-editor.org/rfc/rfc9114>.

   [QUIC]     Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [TCP]      Eddy, W., Ed., "Transmission Control Protocol (TCP)",
              STD 7, RFC 9293, DOI 10.17487/RFC9293, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9293>.

9.2.  Informative References

   [CONNECT-UDP]
              Schinazi, D., "Proxying UDP in HTTP", RFC 9298,
              DOI 10.17487/RFC9298, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9298>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Alejandro R Sede√±o
   Google LLC
   Email: asedeno@google.com
